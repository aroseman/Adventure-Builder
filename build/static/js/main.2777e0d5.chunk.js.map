{"version":3,"sources":["../node_modules/require_optional sync","crud.js","logo.svg","components/navbutton.js","components/plotform.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","MongoClient","require","ObjectId","config","uri","username","password","CreateDocument","ReadDocument","_id","connect","useNewUrlParser","useUnifiedTopology","err","client","console","log","db","database","collection","findOne","goal","Navbutton","props","state","buttonLabel","href","class","this","buttonText","Component","mongo","PlotForm","plotName","plotLocation","handleClick","bind","handlePlotNameChange","setState","target","value","for","type","name","onChange","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2777e0d5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 110;","const MongoClient = require('mongodb').MongoClient;\nconst { ObjectId } = require('mongodb');\nconst config = require('./settings.json')\n\nconst uri = \"mongodb+srv://\" + config.username + \":\" + config.password + \"@adventurebuilder.3wnez.mongodb.net/AdventureBuilder?retryWrites=true&w=majority\";\n\nfunction CreateDocument() {\n\n}\n\nfunction ReadDocument(_id) {\n    MongoClient.connect(uri, {useNewUrlParser: true, useUnifiedTopology: true}, (err, client) => {\n        if (err) {\n            return console.log('Unable to connect to DB');\n        }\n        const db = client.db(config.database);\n        db.collection('dungeon_goals').findOne({\n            \"_id\": ObjectId(\"5fe8e7d8e7f29a16f1964bbf\")\n        }, (err, goal) => {\n            if (err) {\n                return console.log('Unable to fetch')\n            }\n            console.log(goal)\n        })\n    })\n}\n// MongoClient.connect(uri, {useNewUrlParser: true, useUnifiedTopology: true}, (err, client) => {\n//     if (err) {\n//         return console.log('Unable to connect to DB');\n//     }\n//     const db = client.db(config.database);\n//     db.collection('dungeon_goals').findOne({\n//         \"_id\": ObjectId(\"5fe8e7d8e7f29a16f1964bbf\")\n//     }, (err, goal) => {\n//         if (err) {\n//             return console.log('Unable to fetch')\n//         }\n//         console.log(goal)\n//     })\n// })\n\n\nmodule.exports = {CreateDocument, ReadDocument};","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\n\nclass Navbutton extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            buttonLabel: \"weenie\"\n        }\n    }\n    render() {\n        return (\n            <a href=\"#\" class=\"nav-button\">\n                <div><p>{this.props.buttonText}</p></div>\n            </a>\n        )\n    }\n}\n\nexport default Navbutton;","import React, { Component } from 'react';\n\nlet mongo = require('../crud.js');\n\nclass PlotForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            plotName: \"\",\n            plotLocation: \"\",\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.handlePlotNameChange = this.handlePlotNameChange.bind(this);\n    }\n    handleClick(e) {\n        mongo.ReadDocument(\"12\")\n    }\n    handlePlotNameChange(e) {\n        this.setState({plotName: e.target.value});\n    }\n    handlePlotLocationChange(e) {\n        this.setState({plotLocation: e.target.value});\n    }\n    render() {\n        return (\n            <form>\n                <div class=\"text-field edit-plot-name\">\n                    <label for=\"plot-name\">Plot Name</label>\n                    <input type=\"text\" id=\"plot-name\" name=\"plot-name\" value={this.state.plotName} onChange={this.handlePlotNameChange}/>\n                </div>\n                <div class=\"checklist edit-plot-locations\">\n                    <label for=\"plot-locations\">Plot Locations</label>\n                    <div name=\"plot-locations\">\n                        <input type=\"checkbox\" id=\"dungeon\" name=\"dungeon\" value=\"Dungeon\"/>\n                        <label for=\"dungeon\">Dungeon</label><br/>\n                        <input type=\"checkbox\" id=\"wilderness\" name=\"wilderness\" value=\"Wilderness\"/>\n                        <label for=\"wilderness\">Wilderness</label><br/>\n                        <input type=\"checkbox\" id=\"town\" name=\"town\" value=\"Town\"/>\n                        <label for=\"town\">Town</label><br/>\n                    </div>\n                </div>\n                <div class=\"dice-roll\">\n                    <span>Roll Plot</span>\n                    <input name=\"roll-plot\" type=\"button\" class=\"die-btn\" value=\"\" onClick = {this.handleClick}/>\n                </div>\n            </form>\n        )\n    }\n}\n\n\n\nexport default PlotForm;    ","import logo from './logo.svg';\nimport './App.css';\nimport Navbutton from './components/navbutton';\nimport PlotForm from './components/plotform';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header><h1>Adventure Builder</h1></header>\n      <div class=\"navigation\">\n        <div class=\"nav\">\n          <ul>\n            <Navbutton buttonText=\"Adventures\"/>\n            <Navbutton buttonText=\"Plots\"/>\n            <Navbutton buttonText=\"Dungeons\"/>\n            <Navbutton buttonText=\"Tables\"/>\n          </ul>\n          </div>\n        </div>\n        <div class=\"viewport\">\n            <PlotForm></PlotForm>\n          </div>\n    </div> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}